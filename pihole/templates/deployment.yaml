apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
  labels:
    app: pihole
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      securityContext:
        runAsUser: 0  # Use 0 for root user or a specific non-root user ID as needed
        fsGroup: 0    # Use 0 for root group or a specific non-root group ID as needed
      containers:
      - name: pihole
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        securityContext:
          runAsUser: 0  # Use 0 for root user or a specific non-root user ID as needed
          runAsNonRoot: false  # Ensure the container runs as root if necessary
          capabilities:
            add: ["SYS_ADMIN", "NET_ADMIN"]  # Add necessary capabilities
        resources:
          requests:
            memory: "{{ .Values.resources.requests.memory }}"
            cpu: "{{ .Values.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.resources.limits.memory }}"
            cpu: "{{ .Values.resources.limits.cpu }}"
        env:
        - name: TZ
          value: "America/New_York"
        - name: WEBPASSWORD
          valueFrom:
            secretKeyRef:
              name: pihole
              key: adminPassword
        volumeMounts:
        - name: pihole-config
          mountPath: /etc/pihole
        - name: dnsmasq-config
          mountPath: /etc/dnsmasq.d
      volumes:
      - name: pihole-config
        persistentVolumeClaim:
          claimName: pihole-pvc
      - name: dnsmasq-config
        persistentVolumeClaim:
          claimName: dnsmasq-pvc
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
